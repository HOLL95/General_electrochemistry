
import matplotlib.pyplot as plt
import math
import os
import sys
dir=os.getcwd()
dir_list=dir.split("/")
loc=[i for i in range(0, len(dir_list)) if dir_list[i]=="General_electrochemistry"]
source_list=dir_list[:loc[0]+1] + ["src"]
source_loc=("/").join(source_list)
sys.path.append(source_loc)
print(sys.path)
from single_e_class_unified import single_electron
from EIS_class import EIS
from EIS_optimiser import EIS_genetics
from EIS_TD import EIS_TD_sequential
import numpy as np
import pints
from pints.plot import trace
data_loc="/home/henney/Documents/Oxford/Experimental_data/Henry/7_6_23/Text_files/DCV_EIS_text"
data_file="EIS_modified.txt"

data=np.loadtxt(data_loc+"/"+data_file, skiprows=10)    

fitting_data=np.column_stack((np.flip(data[:,0]), np.flip(data[:,1])))
DC_val=0
frequencies=np.flip(data[:,2])
param_list={
       "E_0":DC_val,
        'E_start':  DC_val-10e-3, #(starting dc voltage - V)
        'E_reverse':DC_val+10e-3,
        'omega':0,  #    (frequency Hz)
        "v":100e-3,
        'd_E': 10e-3,   #(ac voltage amplitude - V) freq_range[j],#
        'area': 0.07, #(electrode surface area cm^2)
        'Ru': 100,  #     (uncompensated resistance ohms)
        'Cdl': 1e-5, #(capacitance parameters)
        'CdlE1': 0,
        'CdlE2': 0,
        "CdlE3":0,
        'gamma': 1e-10,
        "original_gamma":1e-10,        # (surface coverage per unit area)
        'k_0': 100, #(reaction rate s-1)
        'alpha': 0.55,
        "sampling_freq":1/(2**8),
        "cpe_alpha_faradaic":1,
        "cpe_alpha_cdl":1,
        "phase":0,
        "E0_mean":DC_val,
        "E0_std":0.02,
        "cap_phase":0,
        "num_peaks":5
    }
solver_list=["Bisect", "Brent minimisation", "Newton-Raphson", "inverted"]
likelihood_options=["timeseries", "fourier"]

simulation_options={
    "no_transient":False,
    "numerical_debugging": False,
    "experimental_fitting":False,
    "dispersion":False,
    "dispersion_bins":[16],
    "test": False,
    "method": "sinusoidal",
    "phase_only":False,
    "likelihood":likelihood_options[0],
    "numerical_method": solver_list[1],
    "label": "MCMC",
    "optim_list":[],
 
    "data_representation":"bode",
}
other_values={
    "filter_val": 0.5,
    "harmonic_range":list(range(1,2)),
    "bounds_val":20000,
}
param_bounds={
    'E_0':[-0.1, 0.1],
    'E0_mean':[-0.4, -0.1],
    'E0_std':[1e-3, 0.1],
    'omega':[0.95*param_list['omega'],1.05*param_list['omega']],#8.88480830076,  #    (frequency Hz)
    'Ru': [0, 1e3],  #     (uncompensated resistance ohms)
    'Cdl': [0,1e-2], #(capacitance parameters)
    'CdlE1': [-1e-2,1e-2],#0.000653657774506,
    'CdlE2': [-5e-4,5e-4],#0.000245772700637,
    'CdlE3': [-1e-4,1e-4],#1.10053945995e-06,
    'gamma': [0.1*param_list["original_gamma"],1e-8],
    'k_0': [1e-9, 1e3], #(reaction rate s-1)
    'alpha': [0.35, 0.65],
    "dcv_sep":[0, 0.5],
    "cpe_alpha_faradaic":[0,1],
    "cpe_alpha_cdl":[0,1],
    "phase":[0, 2*math.pi],
    "cap_phase":[0, 2*math.pi],
}



data_to_fit=EIS().convert_to_bode(fitting_data)
core_params=["E_0","gamma","k_0",  "Cdl", "alpha", "Ru", "phase", "cap_phase"]
param_matrix=np.zeros((len(frequencies),len(core_params)))
big_param_mat=[
                [0.09608980153804333, 7.538467769083987e-09, 402.0578841414292, 0.0029395364083432103, 0.39310735021214077, 47.31052691385355, 0.32713008018347955, 0.06979049680114678],
                [0.053249286356421066, 9.627649244917644e-09, 7.249175367064592, 1.3036752744479315e-05, 0.43050305744978157, 999.3890459777443, 3.71485532072002, 0.8224107440708677],
                [0.034075215820899785, 5.0678886898381875e-09, 99.21694182735934, 0.0008010351773356038, 0.6198944113628937, 86.61802005424856, 1.149572063015857, 6.031283668139659],
                [-0.09745102370165282, 9.944666863404316e-09, 377.31963380929244, 0.0025057039974249397, 0.5198638397987067, 364.44370000964864, 6.2150942249302235, 5.9692354949178945],
                [-0.04758151853546501, 2.8766497869338823e-09, 212.27502628253333, 0.001971912549998876, 0.40307612339899046, 230.21317065729093, 3.348735079590084, 2.9505810162760215],
                [-0.08738192738949242, 2.3403277798014832e-09, 279.3289854278292, 0.002783618867156519, 0.6223799321124388, 118.31746117124158, 2.4298715097562504, 2.0861059064879],
                [-0.01294860564839495, 9.485475428947746e-09, 4.958733601519981, 0.008307723582175821, 0.5302744446308807, 968.559805005158, 1.7478728969132855, 3.4280114608493477],
                [0.022477446055470224, 4.088389278236304e-09, 641.0669836313101, 0.00018924296462982285, 0.6497494752930038, 600.7906777745867, 5.940347982878761, 3.3999146283347184],
                [0.02787522714881352, 4.211763087835811e-09, 322.70658926236234, 4.931912706684757e-07, 0.4342388592168528, 676.1563362898912, 0.1650359155815637, 0.7946982859188706],
                [0.002874375745499508, 1.292733464514032e-09, 37.71619372393205, 0.0013821952409108751, 0.4786512456883917, 133.91384022815936, 3.682464772318295, 2.903500111154643],
                [-0.058068779758004535, 9.658952503620603e-09, 799.6523793857903, 0.000377144031391034, 0.37029997636680617, 475.65881378308023, 3.3231143434846704, 0.15597297279083422],
                [0.010646066491115394, 3.2780348224513647e-09, 20.354690429807402, 0.00027012812439195356, 0.5637423360148535, 420.1563270267256, 0.804971950014006, 3.2109032772146198],
                [-0.0668098207404299, 8.629106801777737e-09, 177.17868406736605, 0.0003466849646763247, 0.5812702142888019, 390.4561632448056, 2.3839504104789344, 0.982275603294607],
                [-0.09021425637950724, 7.035675184809466e-09, 19.00034260926566, 0.0010326117102180772, 0.585516896231882, 115.36667580402518, 5.417089480355583, 4.425570630541766],
                [0.058611048054306364, 7.552932666515899e-09, 28.956947835343026, 0.000987021145713574, 0.6349548492362443, 511.3731105776234, 3.668809868663457, 4.414849584104423],
                [0.010411696942190435, 2.765682990237531e-09, 760.7781457704533, 0.0003993410329458073, 0.42764597403765503, 477.7503488855113, 0.09258944932958049, 1.4323909414335423],
                [0.03581615529001517, 3.1676907870043214e-09, 40.92727578284116, 5.241011059762098e-07, 0.6362147517573746, 402.53847710865, 0.46765673741473107, 2.407689915751517],
                [-0.09512259090260246, 9.89539141640304e-09, 7.935468323112986, 0.0003083471059443109, 0.5052889589193618, 78.12807255492127, 1.4588283806217668, 6.111306587797319],
                [0.04058951513839498, 3.022832868762342e-09, 85.53914701131472, 3.7611278399142555e-05, 0.5396572059173634, 387.54672884328284, 2.1990565666195714, 3.106578135626476],
                [-0.06960539274547153, 7.598464376757886e-09, 26.27156690395021, 2.7039681714438445e-06, 0.648538488994812, 603.7167802419128, 5.328445902464599, 0.29553392248662896],
                [-0.03833135540630635, 4.1456362431607725e-09, 766.7665184496258, 0.005798765560553919, 0.5613257404872607, 366.49307778110057, 1.83875870835999, 2.5621345703770335],
                [-0.029372172879423494, 3.2954472140606437e-09, 467.5040425590382, 2.7702559600799615e-06, 0.6247842137932982, 359.85041765568866, 4.116729875972523, 5.719599744468257],
                [0.0936664556378973, 9.99293850581268e-09, 701.5118157124585, 9.128612665860067e-08, 0.5214338107829937, 362.1747372080987, 0.8186640329378057, 3.745642599771417],
                [0.0862461849183104, 8.972305446303788e-09, 991.0922370257197, 0.0019472824669263154, 0.5239327141900412, 382.40452758424533, 5.716766113659477, 6.124738643233672],
                [-0.00881310991454369, 7.671701842854151e-09, 958.877370414257, 0.0029382168347542093, 0.6182926899565643, 278.5147706467564, 0.07696693706807815, 1.9950387225831892],
                [0.08696421860107792, 4.8100445452053814e-09, 658.3686425093548, 8.1726824987657e-07, 0.42270259824443096, 315.1595775743416, 5.983304515612307, 6.278049592726627],
                [0.008484685470239367, 6.99226130328231e-09, 369.2813353957611, 0.005604731401997302, 0.6351187605879703, 321.91502097508084, 5.196812015296938, 5.756360126732036],
                [-0.09950438091173362, 3.1335726447531383e-09, 827.9383378562896, 0.007782660930719822, 0.6177629315055585, 335.20913610333855, 5.761938164799484, 6.142975441122759],
                [-0.05551921584059917, 3.5254387095330345e-10, 885.5740038826422, 7.277708266854212e-05, 0.5732101022308251, 105.26915889198446, 1.3184555641098066, 5.93763231908389],
                [-0.09956545117388473, 4.170914045944569e-09, 922.069200533193, 0.007489578926213181, 0.6343582109009663, 295.4616768784495, 0.05474549708347447, 0.5330784708124224],
                [0.08788999344912218, 4.811024668377643e-09, 531.1940756755197, 0.0014545814223919627, 0.5358717987252716, 249.42362552774367, 2.2325026801231274, 2.7310020211107084],
                [0.009937047281195113, 9.407909433156656e-09, 911.5506215472999, 0.007648278675878457, 0.5599185233775479, 228.00227419335883, 5.303582704251276, 5.981922008214065],
                [0.09192084626041441, 1.529762274980949e-09, 100.55090768846934, 1.2391879450669058e-06, 0.46916941199756174, 37.35026279602002, 4.489704240648425, 0.5901910479577992],
                [0.032511747323684004, 1.1585500793245374e-09, 575.2051907843885, 0.009675138718859338, 0.497348204468275, 212.15889612212757, 3.206764215777416, 3.647765375255476],
                [-0.0880265256598902, 2.4861344705058845e-09, 148.61817807507998, 3.873810295799746e-07, 0.48530622020145564, 174.03819344469042, 4.455630996860604, 6.279168432418872],
                [0.04729704855139055, 3.319899603473015e-11, 776.2345706302274, 0.005305720494543669, 0.3662249249728946, 186.16861049689112, 6.212834678656524, 0.35344454757738303],
                [0.09266437905216074, 6.0291086006486085e-09, 723.8911837445979, 0.0009689763574831596, 0.5585000029429543, 166.18802172671556, 5.72414280440989, 6.2690065438353795],
                [0.09943143772564447, 9.638255767741699e-09, 552.9160817015953, 0.0012206501134680537, 0.5501196746654528, 145.46985658972568, 1.219503025351826, 1.7707929844744803],
                [0.0613155754026716, 1.2677532493176282e-11, 73.82259610415512, 0.00048541070217538015, 0.3507227320009951, 147.63043629111795, 0.5436597599067091, 0.8518162190937607],
                [0.06169014803269354, 9.880457524052554e-09, 952.3747521712999, 0.0005727281118362585, 0.3631540538183225, 124.5395494149713, 4.988248816909589, 5.495549684758203],
                [0.058397817229562554, 1.104175445100587e-09, 879.5150695458033, 0.006845299774571809, 0.4516720288323762, 134.06167898702986, 5.89639400433156, 6.221784516299506],
                [0.018515240609681932, 9.871456790634768e-09, 530.838357646756, 0.0013196261943925636, 0.4083462130550712, 117.22029010933764, 4.258071990775537, 4.54702964043906],
                [-0.03647158509999897, 7.2725771473303375e-09, 1.092457394344236, 9.338617173353467e-06, 0.49559662620047645, 16.75509488131183, 0.753986020267565, 5.968723713805227],
                [0.09811917297870668, 4.265072575006005e-09, 974.0389159183101, 0.005347753118572991, 0.4671964995729089, 119.12370652346353, 3.186342025796361, 3.427057441091115],
                [0.07168979323118749, 2.2042831396080683e-09, 297.645373511874, 0.0046990947013797555, 0.6383267656519498, 117.0997537275595, 2.949836590547971, 3.1639274897243315],
                [0.09625924553649354, 9.056399650251821e-09, 95.27873064245513, 7.345223489543486e-06, 0.35897264268639834, 79.23937204665027, 0.27266515171016964, 6.271836591475118],
                [0.09850685999054731, 7.612353083271636e-09, 435.2816613981007, 0.009998809285097566, 0.4155846648011593, 110.2872516779394, 6.104181881906281, 6.281766546758775],
                [0.09277634253936187, 7.026153109502249e-09, 10.259687184958555, 0.009261031412908481, 0.5481881668819939, 108.79738537063429, 0.34881820634034905, 0.5098574753675444],
                [-0.004328741164091945, 8.917501980302761e-09, 32.06125270011116, 0.005023043698510051, 0.5737823260695951, 108.79186645461596, 3.692132126244658, 3.854949599560191],
                [0.0011907756958751126, 7.164502294058626e-09, 886.146812136731, 0.001504472103071651, 0.4483391824043339, 118.25247340774595, 3.4576592874520387, 3.6390605850865465],
                [0.009793321946122327, 8.842979801098124e-09, 342.0005507176335, 0.003037098165524646, 0.48109693845413803, 115.79066858326442, 3.3528641607486396, 3.5144932250440664],
                [-0.01719306691431674, 5.202862000381699e-09, 122.9604076579374, 0.008005335353489405, 0.5208249419416994, 100.69133193743485, 5.029466952257639, 5.1639693515954015],
                [-0.05965744784053351, 9.872163631102788e-09, 371.03355534676507, 0.0049647954942910275, 0.39039041454182305, 115.63837075580334, 2.2604584424783476, 2.1890355428537545],
                [-0.07466550599165894, 6.531542477203378e-09, 20.707229395387387, 0.000852556050685031, 0.6489487555231424, 93.41422800149773, 6.1831195178630916, 6.28197942233742],
                [-0.06377312220380704, 6.722583042072441e-10, 486.92045256115284, 0.001297795531407738, 0.3500337228410291, 89.78769554740879, 6.188607169368276, 0.002280044333998733],
                [-0.023724304697530826, 2.00172695183023e-09, 994.934925682876, 0.0020902019712472925, 0.4198744061719014, 106.7376105544874, 3.2457232140581356, 3.349191470230934],
                [0.0017859586626874646, 5.345155333787379e-09, 632.2476999405374, 0.00683288704207695, 0.45147505776318997, 94.08387086428738, 6.151408619569876, 6.238717701580696],
                [0.060046284210916845, 6.3935389191382e-09, 733.3203212056413, 0.007825355826442006, 0.41861258349096786, 98.43361767749946, 5.480605451179425, 5.584985459961334],
                [0.021969170435130803, 6.7036135583384645e-09, 982.6414091796873, 0.009302970111006694, 0.35584714497712305, 95.64041151879049, 5.921820353466931, 6.009601931625532],
                [0.016712806583711506, 3.1005683927104883e-09, 820.9612843869072, 0.002161372736782521, 0.500891273173188, 94.63701316916018, 0.013711515613830326, 0.10263918857945654],
                [-0.0460730822067694, 4.633718592895595e-09, 3.750679481377704, 0.00924493758239142, 0.3647946953976862, 98.22339234963256, 6.139056776753054, 6.2394930565347]]




for i in range(0, len(data_to_fit)):
    current_fit=data_to_fit[i,:]
    td=EIS_TD_sequential(param_list, simulation_options, other_values, param_bounds)
    td.simulation_options["label"]="cmaes"
    td.def_optim_list(core_params)
    score_val=-1e6
    for j in range(0, 3):
        x0=list(np.random.rand(len(td.optim_list)))+[0.9]
        cmaes_problem=pints.SingleOutputProblem(td,[0,frequencies[i]],current_fit)
        score = pints.GaussianLogLikelihood(cmaes_problem)
        lower_bound=np.zeros(len(td.optim_list)+1)
        upper_bound=np.ones(len(td.optim_list)+1)
        CMAES_boundaries=pints.RectangularBoundaries(lower_bound, upper_bound)
        #x0=td.change_norm_group(sim_vals, "norm")+[5]*td.n_outputs()
        print(len(x0), len(td.optim_list), cmaes_problem.n_parameters())
        
        cmaes_fitting=pints.OptimisationController(score, x0, sigma0=[0.075 for x in range(0, td.n_parameters()+1)], boundaries=CMAES_boundaries, method=pints.CMAES)
        cmaes_fitting.set_max_unchanged_iterations(iterations=200, threshold=1e-6)
        cmaes_fitting.set_parallel(True)
        found_parameters, found_value=cmaes_fitting.run()   
        if found_value>score_val:
            score_val=found_value
            real_params=td.change_norm_group(found_parameters[:-1], "un_norm")
            #real_params=sim_class.change_norm_group(dict(zip(names, found_parameters[:-2])), "un_norm", return_type="dict" )
            real_param_dict=dict(zip(td.optim_list, list(real_params)))
            param_matrix[i,:]=real_params
    """td.simulation_options["label"]="MCMC"
    td.def_optim_list(["k_0",  "Cdl", "alpha", "Ru", "phase", "cap_phase"])
    MCMC_problem=pints.MultiOutputProblem(td,[0, frequencies[i]],current_fit)
    

    updated_lb=[param_bounds[x][0] for x in td.optim_list]+([0]*td.n_outputs())
    updated_ub=[param_bounds[x][1] for x in td.optim_list]+([100]*td.n_outputs())
    #updated_lb=[param_bounds[x][0] for x in td.optim_list]
    #updated_ub=[param_bounds[x][1] for x in td.optim_list]
    updated_b=[updated_lb, updated_ub]
    updated_b=np.sort(updated_b, axis=0)

    log_liklihood=pints.GaussianLogLikelihood(MCMC_problem)
    log_prior=pints.UniformLogPrior(updated_b[0], updated_b[1])
    #log_prior=pints.MultivariateGaussianLogPrior(mean, np.multiply(std_vals, np.identity(len(std_vals))))
    print(log_liklihood.n_parameters(), log_prior.n_parameters())
    log_posterior=pints.LogPosterior(log_liklihood, log_prior)
    #real_param_dict=dict(zip(td.optim_list, real_params))

    #mcmc_parameters=np.append(real_params, [found_parameters[-td.n_outputs():]])#[td.dim_dict[x] for x in td.optim_list]+[error]
    mcmc_parameters=[real_param_dict[x] for x in td.optim_list]+[found_parameters[-td.n_outputs():]]
    
    print(mcmc_parameters)
    #mcmc_parameters=np.append(mcmc_parameters,error)
    xs=[mcmc_parameters,
        mcmc_parameters,
        mcmc_parameters
        ]


    mcmc = pints.MCMCController(log_posterior, 3, xs,method=pints.HaarioACMC)#, transformation=MCMC_transform)
    td.simulation_options["test"]=False
    mcmc.set_parallel(True)
    mcmc.set_max_iterations(10000)
    save_file="MCMC/Sequential_TD/Sequential_{0}_Hz".format(frequencies[i])
    chains=mcmc.run()
    f=open(save_file, "wb")
    np.save(f, chains)

    trace(chains)
    plt.show()"""

print(param_matrix)
for line in param_matrix:
    print(list(line))

