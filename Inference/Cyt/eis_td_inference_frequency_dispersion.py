
import matplotlib.pyplot as plt
import math
import os
import sys
dir=os.getcwd()
dir_list=dir.split("/")
loc=[i for i in range(0, len(dir_list)) if dir_list[i]=="General_electrochemistry"]
source_list=dir_list[:loc[0]+1] + ["src"]
source_loc=("/").join(source_list)
sys.path.append(source_loc)
print(sys.path)
from single_e_class_unified import single_electron
from EIS_class import EIS
from EIS_optimiser import EIS_genetics
from EIS_TD import EIS_TD
from heuristic_class import Laviron_EIS
import numpy as np
import time
import pints
from pints.plot import trace
data_loc="/home/henney/Documents/Oxford/Experimental_data/Henry/7_6_23/Text_files/DCV_EIS_text"
data_file="EIS_modified.txt"

data=np.loadtxt(data_loc+"/"+data_file, skiprows=10)    

fitting_data=np.column_stack((np.flip(data[:,0]), np.flip(data[:,1])))
DC_val=0
frequencies=np.flip(data[:,2])
param_list={
       "E_0":DC_val,
        'E_start':  DC_val-10e-3, #(starting dc voltage - V)
        'E_reverse':DC_val+10e-3,
        'omega':0,  #    (frequency Hz)
        "v":100e-3,
        'd_E': 10e-3,   #(ac voltage amplitude - V) freq_range[j],#
        'area': 0.07, #(electrode surface area cm^2)
        'Ru': 100,  #     (uncompensated resistance ohms)
        'Cdl': 1e-5, #(capacitance parameters)
        'CdlE1': 0,
        'CdlE2': 0,
        "CdlE3":0,
        'gamma': 1e-11,
        "original_gamma":1e-11,        # (surface coverage per unit area)
        'k_0': 100, #(reaction rate s-1)
        'alpha': 0.55,
        "sampling_freq":1/(2**8),
        "cpe_alpha_faradaic":1,
        "cpe_alpha_cdl":1,
        "phase":0,
        "E0_mean":DC_val,
        "E0_std":0.02,
        "cap_phase":0,
        "num_peaks":3
    }
solver_list=["Bisect", "Brent minimisation", "Newton-Raphson", "inverted"]
likelihood_options=["timeseries", "fourier"]

simulation_options={
    "no_transient":False,
    "numerical_debugging": False,
    "experimental_fitting":False,
    "dispersion":False,
    "dispersion_bins":[2],
    "test": False,
    "method": "sinusoidal",
    "phase_only":False,
    "likelihood":likelihood_options[0],
    "numerical_method": solver_list[1],
    "label": "MCMC",
    "optim_list":[],
 
    "data_representation":"bode",
}
other_values={
    "filter_val": 0.5,
    "harmonic_range":list(range(1,2)),
    "bounds_val":20000,
}
param_bounds={
    'E_0':[-0.1, 0.1],
    'E0_mean':[-0.4, -0.1],
    'E0_std':[1e-3, 0.1],
    'omega':[0.95*param_list['omega'],1.05*param_list['omega']],#8.88480830076,  #    (frequency Hz)
    'Ru': [0, 1e3],  #     (uncompensated resistance ohms)
    'Cdl': [0,1e-2], #(capacitance parameters)
    'CdlE1': [-1e-2,1e-2],#0.000653657774506,
    'CdlE2': [-5e-4,5e-4],#0.000245772700637,
    'CdlE3': [-1e-4,1e-4],#1.10053945995e-06,
    'gamma': [0.1*param_list["original_gamma"],1e-8],
    'k_0': [1e-9, 1e3], #(reaction rate s-1)
    'alpha': [0.35, 0.65],
    "dcv_sep":[0, 0.5],
    "cpe_alpha_faradaic":[0,1],
    "cpe_alpha_cdl":[0,1],
    "phase":[0, 2*math.pi],
    "cap_phase":[0, 2*math.pi],
}

td=EIS_TD(param_list, simulation_options, other_values, param_bounds)
orig_params=["E_0","gamma","k_0",  "Cdl", "alpha", "Ru", "phase", "cap_phase"]
td.def_optim_list(orig_params)

sim_vals=[0,1e-10, 10, 1e-5, 0.55, 100, 0,0]
vals=dict(zip(orig_params, sim_vals))
start=time.time()
practice=td.simulate(sim_vals,  frequencies)
print(time.time()-start)
laviron_circuit={"z1":"R0", "z2":{"p_1":["R1", ("Q2", "alpha2")], "p_2":"C1"}}
circuit_sim=EIS(circuit=laviron_circuit)
equiv_fit=circuit_sim.test_vals({'R0': 106.15130291843991, 'R1': 229.75209631047858, 'C1': 3.834939035094845e-06, 'Q2': 0.00024417333059895694, 'alpha2': 0.7912685393555589}, frequencies=frequencies*2*np.pi)
fig, ax=plt.subplots(1,2)
twinx=ax[0].twinx()
EIS().bode(practice, frequencies, ax=ax[0], twinx=twinx, data_type="phase_mag")
EIS().bode(fitting_data, frequencies, ax=ax[0], twinx=twinx)
EIS().bode(equiv_fit, frequencies, ax=ax[0], twinx=twinx)
EIS().nyquist(practice, ax=ax[1], orthonormal=False)
EIS().nyquist(fitting_data, ax=ax[1], orthonormal=False)
EIS().nyquist(equiv_fit, ax=ax[1], orthonormal=False)
plt.show()
dispersion_params=["cap_phase"]
all_dispersion_params=["" for x in range(0, len(dispersion_params)*len(frequencies))]
def flatten(l):
    return [item for sublist in l for item in sublist]

for j in range(0, len(frequencies)):
    for i in range(0, len(dispersion_params)):
        all_dispersion_params[(len(dispersion_params)*j)+i]="{0}_{1}".format(dispersion_params[i], j)
     


#non_disped_params=list(set(orig_params)-set(dispersion_params))
all_parameters=orig_params+all_dispersion_params#
#print(all_parameters.index("cap_phase"))
#[6.816905229705668e-05*(1+(0.01*x)),  6.28316810297355]
test_vals=[vals[x] for x in orig_params]+ flatten([[0] for x in range(0, len(frequencies))])
td.simulation_options["frequency_dispersion"]=dispersion_params
td.def_optim_list(all_parameters)
start=time.time()
#values=[0.07622555018405183, 5.521574859241031e-09, 17.146553555654105, 0.007248476404299364, 0.4024929383060603, 273.593139395339, 1.2043870932657944e-07, 2.122720042163852, 0.009993002520315503, 5.661231509698953e-07, 0.0024141143617628985, 6.023546617559576, 0.009999262422204634, 2.562382714182058e-06, 0.0022632468924826477, 5.986472386879684, 0.002441293504429982, 5.982740210219875, 0.009279800297468707, 0.011606624841681637, 0.007902534903390187, 0.0003113230242653273, 0.007040000332398737, 6.46967228945246e-07, 0.0015953979379068318, 5.810587875467808, 0.005598855902129737, 8.545276486570249e-05, 0.00535421694040217, 0.0355569881110971, 0.001339495083528498, 5.7462935061806855, 0.003962913725227794, 0.009444575515301137, 0.005042036189205903, 0.17223547883247586, 0.0029229844887884993, 0.0007050644250062721, 0.002562755009402739, 0.010044864927637759, 0.0004698752288636237, 5.578297095119602, 0.0003954987289172881, 5.669360425892351, 0.0002722441060198677, 5.689713662075777, 0.0011209258116111989, 2.6015791252402674e-05, 8.522537521964415e-10, 3.6892555855310842, 0.00016311386686420148, 0.0006179900736759965, 0.0003818288759626129, 6.281199169377025, 0.000426408428233825, 0.03313184787409439, 0.0002467160325693084, 0.08682029708893327, 0.006613926674385706, 0.33716171878533147, 0.0038247173089929307, 0.3296328310336589, 0.00576326216590336, 0.3538303496244403, 0.00021938372725443565, 0.09956102609477398, 0.00044336298879910346, 0.23644486411662496, 0.009949734598878194, 0.39583733567850565, 0.008372457167273377, 0.40492481000521696, 0.002846655043243752, 0.39680227298711696, 0.009750053200555614, 0.424836699800418, 0.00020984625867433257, 0.3048575262636138, 0.00013896232702765183, 0.2749947241933561, 0.00460489135498615, 0.40902867256303305, 2.7197584663625335e-05, 6.283165879556626, 0.004769243821996432, 0.3741412852973204, 4.9265200995837545e-05, 0.1675338913183196, 2.0523387781740868e-05, 6.277621298968496, 0.00745644053528031, 0.292872724213173, 0.007075677699020482, 0.2655994609417199, 0.003530775452964118, 0.2375660909468116, 0.0052234968642313456, 0.21401845387179516, 0.00842666333422553, 0.19443275961455322, 0.008948613256834699, 0.17706137553682347, 0.006704586690225575, 0.16177295379936316, 0.009021161874893848, 0.14775063187658774, 0.009878681961455388, 0.13639663592328172, 0.005067023902202875, 6.283185117104326, 0.007224200291784635, 0.11605243588357683, 0.008058751829912487, 0.1098473677592587, 0.007170490209702491, 0.09878136939875785, 0.008105482395295287, 0.0938238636352709, 0.0034895666045534745, 0.08995061253421906, 0.0004928366893729554, 0.0834580960223349, 0.0070054912066271, 6.283184074250197, 0.0036363082292562507, 0.08256642348614555, 0.0009622293557056183, 0.09146746548877029, 0.009938548465540096, 0.10023269679969284]
values=[0.42114769472629854, 0.3479421312317945, 0.0044449999129824065, 0.006625281732319098, 2.1593178934405432e-08, 0.10385154375419328, 0.0006287376700242532, 0.8624718714421467, 0.917812991180901, 0.9035429039219817, 0.8894221130245148, 2.712752958095361e-07, 0.8432582974424969, 0.8084255822072799, 0.7559033082201485, 0.6908125261953676, 0.000312897255611672, 0.48955494473068306, 0.38993222569597463, 0.32360789307769156, 0.24378291358190995, 0.19184337681118585, 0.14954655561461105, 0.1292650791294325, 0.1257707206809106, 0.12827741441349536, 0.1293717806360163, 0.9999996971698873, 0.11967844845686998, 0.10639594186865298, 0.9999997511550014, 0.05780897659035267, 0.9999983745722456, 0.9999982592334791, 4.008894123720228e-07, 3.6178712298993374e-09, 5.024769255269399e-08, 7.631659047948333e-10, 1.9731762370275215e-10, 1.461809442458119e-09, 0.9617738216234385, 2.304959968435844e-10, 2.0947782815828306e-08, 0.9807245409724986, 5.429379937515218e-08, 1.0644903517536873e-07, 0.9999814014722138, 0.9999999780691327, 0.008771134669599452, 0.999999981167564, 0.013392441678105913, 0.9999999701753073, 0.014709735211001326, 0.014703915407426821, 0.014532310030944618, 0.01437693202590247, 0.9999999991352182, 0.013929157305692915, 0.013530484091282205, 0.01322715141987436, 0.013172504734558565, 0.012491001946115923, 0.0124278061920246, 0.012251076174799397, 0.9999999404487315, 0.01492312855873761, 0.01252621287291046, 0.01415412417829267, 0.015790200037149614, 6.816453519571228, 0.041222593071808755]
vals=[-0.015770461054740295, 3.4800733701867136e-09, 4.444999913977962, 6.625281732319098e-05, 0.35000000647795365, 103.85154375419329, 0.003950475290366714, 5.419070590500977, 5.766789100926384, 5.6771274983289715, 5.588403952436253, 1.7044729528312731e-06, 5.29834814464797, 5.079487740072884, 4.749480559857279, 4.340503114606347, 0.0019659914391160728, 3.075964435788942, 2.450016431288782, 2.033288359073094, 1.5317332207592875, 1.2053874864597598, 0.939628720977039, 0.8121964459174569, 0.7902407442556852, 0.8059907654858609, 0.8128668712558781, 6.283183404441872, 0.7519618689302549, 0.6685054186926538, 6.283183743640347, 0.36322451233559255, 6.283175094315802, 6.2831743696209585, 2.5188624656197522e-06, 2.2731755354971255e-08, 3.15715563566764e-07, 4.7951127999473116e-09, 1.2397831940967228e-09, 9.184819610749235e-09, 6.043003144854349, 1.4482490607313217e-09, 1.3161880120640144e-07, 6.162074026228847, 3.4113800250491237e-07, 6.688390137773197e-07, 6.283068449183065, 6.2831851693838825, 0.055110664483320755, 6.283185188851901, 0.0841471927791346, 6.283185119785515, 0.09242399215026574, 0.09238742524595574, 0.09130919686580974, 0.09033292806747004, 6.283185301746002, 0.08751947652452291, 0.08501453884137149, 0.08310864345719418, 0.08276528820693191, 0.07848327989978719, 0.07808620926620445, 0.07697578181863746, 6.283184933007931, 0.09376478209741224, 0.0787045166776748, 0.08893298507304384, 0.09921275287084501]

#print(len(values), len(td.optim_list))
#td.simulation_options["label"]="MCMC"
#test_vars=td.simulate(values,  frequencies)
#print(time.time()-start)
#fig, ax=plt.subplots()
#twinx=ax.twinx()

#EIS().bode(test_vars, frequencies, ax=ax, twinx=twinx, data_type="phase_mag", label="Simulation", compact_labels=True)
#EIS().bode(fitting_data, frequencies, ax=ax, twinx=twinx, label="Data", compact_labels=True)
#plt.show()
print(td.optim_list)
data_to_fit=EIS().convert_to_bode(fitting_data)
td.simulation_options["label"]="cmaes"
all_data=np.column_stack((fitting_data, data_to_fit))
td.other_values["secret_data"]=fitting_data
cmaes_problem=pints.MultiOutputProblem(td,frequencies,data_to_fit)


score = pints.GaussianLogLikelihood(cmaes_problem)
lower_bound=np.append(np.zeros(len(td.optim_list)), [0]*td.n_outputs())
upper_bound=np.append(np.ones(len(td.optim_list)), [50]*td.n_outputs())
CMAES_boundaries=pints.RectangularBoundaries(lower_bound, upper_bound)

for i in range(0, 10):
    x0=list(np.random.rand(len(td.optim_list)))+[5]*td.n_outputs()
    #x0=td.change_norm_group(sim_vals, "norm")+[5]*td.n_outputs()
    print(len(x0), len(td.optim_list), cmaes_problem.n_parameters())
    cmaes_fitting=pints.OptimisationController(score, x0, sigma0=[0.075 for x in range(0, td.n_parameters()+td.n_outputs())], boundaries=CMAES_boundaries, method=pints.CMAES)
    cmaes_fitting.set_max_unchanged_iterations(iterations=200, threshold=1e-4)
    td.simulation_options["eis_test"]=False
    cmaes_fitting.set_parallel(True)
    found_parameters, found_value=cmaes_fitting.run()   
    print(list(found_parameters))
    td.def_optim_list(all_parameters)
    #found_parameters=[0.10487903661126297, 0.40342620734920664, 0.002075749105321917, 0.3009251284017961, 0.060558151585271586, 0.9991871631368601, 0.13940419476545704, 0.6052332550768639, 0.12974339152505715, 0.9832979181892831, 0.12431734835336218, 0.23812962824229134, 0.11544882374999965, 0.6762446821399406, 0.10579337320066806, 0.8414774438800677, 0.10147454633082653, 0.9906443412212456, 0.09331830337043563, 0.5309916851528229, 0.08830871073399182, 0.9580881741026729, 0.086143264666799, 0.1948997264442598, 0.08507246109928035, 0.5133648283379861, 0.08395038933831511, 0.0014495605348126318, 0.08602844758983896, 0.82494111221458, 0.08521482119660415, 0.9957271042332291, 0.07736493979732485, 0.4850280265914546, 0.06628811694169465, 0.922746208222359, 0.05309384795610281, 0.9214525254386359, 0.0398161839754897, 0.7677127050134143, 0.028088332860913685, 0.5129289308204024, 0.02135545127877325, 0.2586238473230888, 0.0165562707766563, 0.7031301365654345, 0.014796773064802322, 0.19007062551169662, 0.014376539143019324, 0.9569628420277217, 0.014566737122198982, 0.9722786691520988, 0.015184227866228127, 0.3996837056391702, 0.014648213369974536, 0.824763964197522, 0.014468688720447815, 0.37339254264735566, 0.013510739520238381, 0.3612719506637174, 0.012182194235140872, 0.30793467685869613, 0.011353592701443743, 0.3039842291724558, 0.010199463157714962, 0.08789400212269982, 0.009197115225967056, 0.27875341275289744, 0.00842022795607674, 0.706259169550062, 0.007437997702330093, 0.48054418719370406, 0.006704768363041972, 0.8141564152734311, 0.006063930289110556, 0.6205260868215499, 0.005472373567335361, 0.6913876221828467, 0.005001565834974639, 0.9615827012126724, 0.004515601970155641, 0.36846148733856277, 0.00413451027625518, 0.478446284734083, 0.0037843865802153595, 0.2381414171936448, 0.0035140945002042076, 0.3241315944475005, 0.3630102050301122, 0.4418598788448017, 0.26611562476624084, 0.5507431084003114, 0.36822461667434747, 0.9300761371444194, 0.00298422322358273, 0.31892488106919414, 0.0033626487021251933, 0.9999864627042889, 0.6011881533062242, 0.12087686421737767, 0.04643302567204272, 0.03468957252911603, 0.002069094960605531, 0.4039027307472205, 0.4537298987590881, 0.6186689231942744, 0.9999996187843311, 0.308494802686553, 0.6095259545125571, 0.3370509630566414, 0.697125228710645, 0.9279430060490236, 0.8212980967818672, 0.431444994544704, 0.431678784287003, 0.06882830242976944, 0.4544301789568981, 0.49330042874081886, 0.46554176667304237, 0.22077069916003966, 0.4417711418161031, 0.9997050579595013, 0.9973292709750347, 0.9468210186404324, 0.2651361862913255, 0.49179632155749786, 0.018207800600027267, 0.5340196035607356, 7.819435723494565, 0.019994722148184763]
    
    real_params=td.change_norm_group(found_parameters[:-td.n_outputs()], "un_norm")
    print(list(real_params))

    #real_params=sim_class.change_norm_group(dict(zip(names, found_parameters[:-2])), "un_norm", return_type="dict" )
    #print(dict(zip(td.optim_list, list(real_params))))
td.simulation_options["label"]="MCMC"
sim_data=td.simulate(real_params, frequencies)


fig, ax=plt.subplots(1,2)
twinx=ax[0].twinx()
EIS().bode(fitting_data, frequencies, ax=ax[0], twinx=twinx, compact_labels=True)
EIS().bode(sim_data, frequencies,ax=ax[0], twinx=twinx, compact_labels=True, data_type="phase_mag")
EIS().nyquist(fitting_data, ax=ax[1], orthonormal=False)
EIS().nyquist(sim_data, ax=ax[1], orthonormal=False)


plt.show()

